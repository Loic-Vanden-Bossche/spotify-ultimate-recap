---
import { v4 as uuid } from "uuid";
import LanguageDetector, {
  type CustomDetector,
} from "i18next-browser-languagedetector";
import i18n from "i18next";
import { initReactI18next } from "react-i18next";

import Home from "../components/Home.astro";
import Layout from "../layouts/Layout.astro";
import { LoadWrapper } from "../components/LoadWrapper";
import { extractUuid } from "../lib/extract-uuid";

import en from "../locales/en.json";
import fr from "../locales/fr.json";
import { getSharedChartFromId } from "../lib/shared-from-id";
import type { SharedChartFullData } from "../models/shared-chart-full-data.ts";

export const prerender = false;

const languageDetector = new LanguageDetector(null, {
  order: ["astroCookie", "acceptLang"],
  lookupCookie: "i18next",
  caches: ["astroCookie"],
  excludeCacheFor: ["cimode"],
  convertDetectedLanguage: (lng) => {
    const parts = lng.toLowerCase().split("-");
    return parts[0];
  },
});

const acceptLang: CustomDetector = {
  name: "acceptLang",

  lookup() {
    const header = Astro.request.headers.get("accept-language");

    if (!header) {
      return;
    }

    const languages = header.split(",").map((l) => {
      const [locale, q = "1"] = l.split(";");
      return { locale, q: parseFloat(q.split("=")[1]) };
    });

    const sorted = languages.sort((a, b) => b.q - a.q);

    return sorted[0].locale;
  },
};

const astroCookie: CustomDetector = {
  name: "astroCookie",

  lookup(options) {
    const cookie = Astro.request.headers.get("cookie");

    if (!cookie) {
      return;
    }

    const cookies = cookie.split(";").map((c) => {
      const [name, value] = c.split("=").map((v) => v.trim());
      return { name, value };
    });

    const i18nextCookie = cookies.find((c) => c.name === options.lookupCookie);

    if (!i18nextCookie) {
      return;
    }

    return i18nextCookie.value;
  },

  cacheUserLanguage(lng, options) {
    Astro.response.headers.set("Set-Cookie", `${options.lookupCookie}=${lng}`);
  },
};

languageDetector.addDetector(acceptLang);
languageDetector.addDetector(astroCookie);

i18n
  .use(languageDetector)
  .use(initReactI18next)
  .init({
    supportedLngs: ["en", "fr"],
    resources: {
      en,
      fr,
    },
    fallbackLng: "en",
    interpolation: {
      escapeValue: false,
    },
  });

const cookieUUID = extractUuid(Astro.request);

const userUUID = cookieUUID ?? uuid();

if (!cookieUUID) {
  Astro.response.headers.set(
    "Set-Cookie",
    `uuid=${userUUID}; Path=/; HttpOnly; Secure; SameSite=Strict; Max-Age=31536000`,
  );
}

let sharedChart: SharedChartFullData | null = null;

if (Astro.url.searchParams.has("s")) {
  const s = Astro.url.searchParams.get("s");

  if (s) {
    sharedChart = await getSharedChartFromId(s);
  }
}
---

<Layout>
  <LoadWrapper sharedChart={sharedChart} client:load>
    <Home sharedChart={sharedChart} />
  </LoadWrapper>
</Layout>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer base {
    @font-face {
      font-family: "Gotham";
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url(/fonts/GothamMedium.ttf) format("woff2");
    }
  }
</style>

<script>
  import "echarts/i18n/langFR";
</script>
