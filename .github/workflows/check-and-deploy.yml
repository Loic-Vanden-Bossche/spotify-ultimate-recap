name: Check And Deploy Spotify Ulitmate Recap

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/check-and-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/check-and-deploy.yml'


env:
  CI: true

defaults:
  run:
    working-directory: infrastructure

jobs:
  build-and-push-app:
    name: "Build and Push App"
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    defaults:
      run:
        working-directory: .

    outputs:
      image_tag: ${{ env.IMAGE_TAG }}
      migrate_image_tag: ${{ env.MIGRATE_IMAGE_TAG }}

    steps:
      - name: Set images tags
        id: repo
        run: |
          IMAGE_TAG="ghcr.io/${GITHUB_REPOSITORY,,}:latest"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          MIGRATE_IMAGE_TAG="ghcr.io/${GITHUB_REPOSITORY,,}-migrate:latest"
          echo "MIGRATE_IMAGE_TAG=$MIGRATE_IMAGE_TAG" >> $GITHUB_ENV

      - id: check
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "skipped=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "skipped=true" >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: ${{ steps.check.outputs.skipped == 'false' }}
        uses: actions/checkout@v4

      - name: Sonarqube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        if: ${{ steps.check.outputs.skipped == 'false' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up Docker Buildx
        if: ${{ steps.check.outputs.skipped == 'false' }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ steps.check.outputs.skipped == 'false' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push app Docker image
        if: ${{ steps.check.outputs.skipped == 'false' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}

      - name: Build and push migrate Docker image
        if: ${{ steps.check.outputs.skipped == 'false' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: migrate.Dockerfile
          tags: ${{ env.MIGRATE_IMAGE_TAG }}

  terraform:
    name: "Terraform"
    runs-on: self-hosted
    needs:
      - build-and-push-app

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_SECRET_KEY }}
      TF_VAR_repository_name: ${{ github.repository }}
      TF_VAR_app_image_tag: ${{ needs.build-and-push-app.outputs.image_tag }}
      TF_VAR_migrate_image_tag: ${{ needs.build-and-push-app.outputs.migrate_image_tag }}
      TF_VAR_database_password: "user"
      TF_VAR_database_username: "password"
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decode Kube Config
        run: mkdir ~/.kube && echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Run Migration Job
        run: terraform apply -var="migrate_db=true" -target=module.app.kubernetes_job.db_migration -target=module.app.random_id.db_migration -auto-approve

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
